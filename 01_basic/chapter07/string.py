# 字符串编码转换
# 最早的字符串编码是美国标准信息交换码，即ASCII码
# ASCII码最多只能表示256个符号，每个字符占一个字节
# GBK和GB2312是我国制定的中文编码标准，使用一个字节表示英文字母，2个字节表示中文字符。
# UTF-8是国际通用的编码，对全世界所有国家需要用到的字符都进行了编码。UTF-8采用一个字节表示英文字符，用3个字节表示中文。
# 在Python 3.x中，默认采用的编码格式为UTF-8
import math

# 在Python中，有两种常用的字符串类型，分别为str和bytes。
# 其中，str表示Unicode字符（ASCII或者其他）；bytes表示二进制数据（包括编码的文本）。
# 这两种类型的字符串不能拼接在一起使用。通常情况下，str在内存中以Unicode表示，一个字符对应若干个字节。
# 但是如果在网络上传输，或者保存到磁盘上，就需要把str转换为字节类型，即bytes类型。
# bytes类型的数据是带有b前缀的字符串（用单引号或双引号表示），例如，b'\xd2\xb0'都是bytes类型的数据。
print(type("b'\xd2\xb0'"))

# str和bytes之间可以通过encode()和decode()方法进行转换
# 使用encode()方法编码
# encode()方法为str对象的方法，用于将字符串转换为二进制数据（即bytes），也称为“编码”
# str.encode([encoding="utf-8"][,errors="strict"])
# str：表示要进行转换的字符串。
# encoding="utf-8"：可选参数，用于指定进行转码时采用的字符编码，默认为UTF-8，如果想使用简体中文，也可以设置为gb2312。当只有这一个参数时， 也可以省略前面的“encoding=”，直接写编码。
# errors="strict"：可选参数，用于指定错误处理方式，其可选择值可以是strict（遇到非法字符就抛出异常）、ignore（忽略非法字符）、replace（用“?”替换非法字符）或xmlcharrefreplace（使用XML的字符引用）等，默认值为strict。
# 在使用encode()方法时，不会修改原字符串，如果需要修改原字符串，需要对其进行重新赋值。
str1 = "我辈岂是蓬蒿人"
byte1 = str1.encode('UTF-8')
print(str1)
print(byte1)

# 使用decode()方法解码
# decode()方法为bytes对象的方法，用于将二进制数据转换为字符串，即将使用encode()方法转换的结果再转换为字符串，也称为“解码”
# bytes.decode([encoding="utf-8"][,errors="strict"])
# bytes：表示要进行转换的二进制数据，通常是encode()方法转换的结果。
# encoding = "utf-8"：可选参数，用于指定进行解码时采用的字符编码，默认为UTF-8，如果想使用简体中文，也可以设置为gb2312 。当只有这一个参数时， 也可以省略前面的“encoding =”，直接写编码。
# 在设置解码采用的字符编码时，需要与编码时采用的字符编码一致。
# errors = "strict"：可选参数，用于指定错误处理方式，其可选择值可以是strict（遇到非法字符就抛出异常）、ignore（忽略非法字符）、replace（用“?”替换非法字符）或xmlcharrefreplace（使用XML的字符引用）等，默认值为strict。
str2 = byte1.decode('UTF-8')
print(str2)

# 字符常用操作
# 拼接字符串
# 使用“+”运算符可完成对多个字符串的拼接，“+”运算符可以连接多个字符串并产生一个字符串对象。
str3 = 'HELLO'
str4 = 'WORLD'
print(str3 + ' ' + str4)
# 字符串不允许直接与其他类型的数据拼接。
# 可以使用str()函数将其他类型的数据转为字符串再进行拼接

# 计算字符串的长度
# 在Python中，数字、英文、小数点、下划线和空格占一个字节；
# 一个汉字可能会占2~4个字节，占几个字节取决于采用的编码。汉字在GBK/GB2312编码中占2个字节，在UTF8/unicode中一般占用3个字节（或4个字节）。
# 在Python中，提供了len()函数计算字符串的长度
# len(string)
# string用于指定要进行长度统计的字符串
print(len(str3 + ' ' + str4))
# 在默认的情况下，通过len()函数计算字符串的长度时，不区分英文、数字和汉字，所有字符都认为是一个。
str5 = '福睿'
length = len(str5.encode())  # 默认采用UTF-8编码，汉字占3个字节
print(length)
length1 = len(str5.encode('GBK'))  # 采用GBK编码，汉字占2个字节
print(length1)

# 截取字符串
# 由于字符串也属于序列，所以要截取字符串，可以采用切片方法实现
# string[start : end : step]
# string：表示要截取的字符串；
# start：表示要截取的第一个字符的索引（包括该字符），如果不指定，则默认为0；
# end：表示要截取的最后一个字符的索引（不包括该字符），如果不指定，则默认为字符串的长度；
# step：表示切片的步长，如果省略，则默认为1，当省略该步长时，最后一个冒号也可以省略。
# 字符串的索引同序列的索引是一样的，也是从0开始，并且每个字符占一个位置
idnum = '34082619990404103X'
year = idnum[6:10]
print(year)
month = idnum[10:12:1]
print(month)
day = idnum[-6:-4]
print(day)

# 在进行字符串截取时，如果指定的索引不存在，则会抛出异常。要解决该问题，可以采用try…except语句捕获异常。
try:
    substr1 = idnum[25]
except IndexError:
    print('non-existent index')

# 分割、合并字符串
# 分割字符串
# 字符串对象的split()方法可以实现字符串分割。即把一个字符串按照指定的分隔符切分为字符串列表。该列表的元素中，不包括分隔符。
# str.split(sep, maxsplit)
# str：表示要进行分割的字符串。
# sep：用于指定分隔符，可以包含多个字符，默认为None，即所有空字符（ 包括空格、换行“\n” 、制表符“\t”等）。
# maxsplit：可选参数，用于指定分割的次数，如果不指定或者为−1，则分割次数没有限制，否则返回结果列表的元素个数最多为maxsplit + 1。
# 在split()方法中，如果不指定sep参数，那么也不能指定maxsplit参数。
# 返回值：分割后的字符串列表。
str6 = '@zl @wh @zwfr'
list1 = str6.split()  # 如果不指定参数，默认采用空白符进行分割
print(list1)
list2 = []
for item in list1:
    print(item[1:])
    list2.append(item[1:])
print(list2)

# 合并字符串
# 合并字符串与拼接字符串不同，它会将多个字符串采用固定的分隔符连接在一起。
# 合并字符串可以使用字符串对象的join()方法实现。
# strnew = string.join(iterable)
# strnew：表示合并后生成的新字符串。
# string：字符串类型，用于指定合并时的分隔符。
# iterable：可迭代对象，该迭代对象中的所有元素（字符串表示）将被合并为一个新的字符串。string作为边界点分割出来。
str7 = '@'.join(list2)
print('@' + str7)

# 检索字符串
# count()方法用于检索指定字符串在另一个字符串中出现的次数。如果检索的字符串不存在，则返回0，否则返回出现的次数。
# str.count(sub[, start[, end]])
# str：表示原字符串；
# sub：表示要检索的子字符串；
# start：可选参数，表示检索范围的起始位置的索引，如果不指定，则从头开始检索；
# end：可选参数，表示检索范围的结束位置的索引，如果不指定，则一直检索到结尾。
print(f"str6 has {str6.count('@')} '@'")

# find()方法用于检索是否包含指定的子字符串。如果检索的字符串不存在，则返回−1，否则返回首次出现该子字符串时的索引。
# str.find(sub[, start[, end]])
# str：表示原字符串；
# sub：表示要检索的子字符串；
# start：可选参数，表示检索范围的起始位置的索引，如果不指定，则从头开始检索；
# end：可选参数，表示检索范围的结束位置的索引，如果不指定，则一直检索到结尾。
print(f"the first @ in str6 is at {str6.find('@')}")
# Python的字符串对象还提供了rfind()方法，其作用与find()方法类似，只是从右边开始查找。
print(f"the last @ in str6 is at {str6.rfind('@')}")

# index()方法用于检索是否包含指定的子字符串。只不过如果使用index()方法，当指定的字符串不存在时会抛出异常。
# str.index(sub[, start[, end]])
# str：表示原字符串；
# sub：表示要检索的子字符串；
# start：可选参数，表示检索范围的起始位置的索引，如果不指定，则从头开始检索；
# end：可选参数，表示检索范围的结束位置的索引，如果不指定，则一直检索到结尾。
print(f"the first @ in str6 is at {str6.index('@')}")
# Python 的字符串对象还提供了rindex()方法， 其作用与index()方法类似，只是从右边开始查找。
print(f"the last @ in str6 is at {str6.rindex('@')}")

# startswith()方法用于检索字符串是否以指定子字符串开头。如果是，则返回True，否则返回False。
# str.startswith(prefix[, start[, end]])
# str：表示原字符串；
# prefix：表示要检索的子字符串；
# start：可选参数，表示检索范围的起始位置的索引，如果不指定，则从头开始检索；
# end：可选参数，表示检索范围的结束位置的索引，如果不指定，则一直检索到结尾。
print(f"is str6 start with @? {str6.startswith('@')}")

# endswith()方法用于检索字符串是否以指定子字符串结尾。如果是，则返回True，否则返回False。
# str.endswith(suffix[, start[, end]])
# str：表示原字符串；
# suffix：表示要检索的子字符串；
# start：可选参数，表示检索范围的起始位置的索引，如果不指定，则从头开始检索；
# end：可选参数，表示检索范围的结束位置的索引，如果不指定，则一直检索到结尾。
print(f"is str6 end with @? {str6.endswith('@')}")

# 字母的大小写转换
str8 = 'hello ahu'
str9 = str8.upper()
# lower()方法用于将字符串中的全部大写字母转换为小写字母。
# 如果字符串中没有应该被转换的字符，则将原字符串返回；否则将返回一个新的字符串，将原字符串的字符都转换成等价的小写字符。
# str.lower()
# str为要进行转换的字符串
print(str9.lower())

# upper()方法
# 用于将字符串的全部小写字母转换为大写字母。
# 如果字符串中没有应该被转换的字符，则将原字符串返回；否则返回一个新字符串，将原字符串中的字符都转换成等价的大写字符。
# str.upper()
# str为要进行转换的字符串
print(str9)

# Python中提供的strip()函数去除字符串左右两边的空格和特殊字符，
# 也可以使用lstrip()函数去除字符串左边的空格和特殊字符，
# 或使用rstrip()函数去除字符串中右边的空格和特殊字符。
# 特殊字符是指制表符\t、回车符\r、换行符\n等。

# strip()方法用于去掉字符串左、右两侧的空格和特殊字符
# str.strip([chars])
# str为要去除空格的字符串；
# chars为可选参数，用于指定要去除的字符，可以指定多个
str10 = '@..hello ahu...@'
print(str10.strip('@.'))
str11 = '  \n  hello ahu  \t \r '
print(str11.strip())

# lstrip()方法用于去掉字符串左侧的空格和特殊字符
# str.lstrip([chars])
# str为要去除空格的字符串；
# chars为可选参数，用于指定要去除的字符，可以指定多个

# rstrip()方法用于去掉字符串右侧的空格和特殊字符
# str.rstrip([chars])
# str为要去除空格的字符串；
# chars为可选参数，用于指定要去除的字符，可以指定多个
str12 = '  \n  hello ahu'
print(str12.lstrip())
str13 = 'hello ahu  \t \r '
print(str13.rstrip())

# 格式化字符串
# 格式化字符串的意思是先制定一个模板，在这个模板中预留几个空位，然后再根据需要填上相应的内容。
# 这些空位需要通过指定的符号标记（也称为占位符），而这些符号还不会显示出来。

# 使用%操作符
# '%[-][+][0][m][.n]格式化字符'%exp
# -：可选参数，用于指定左对齐，正数前方无符号，负数前面加负号。
# +：可选参数，用于指定右对齐，正数前方加正号，负数前方加负号。
# 0：可选参数，表示右对齐，正数前方元符号，负数前方加负号，用0填充空白处（一般与m参数一起使用）。
# m：可选参数，表示占有宽度。
# .n：可选参数，表示小数点后保留的位数。
# 格式化字符：用于指定类型。

# 格式字符	说明
# %s	    字符串（采用str()显示）
# %c	    单个字符
# %d或者%i	十进制整数
# %x	    十六进制整数
# %f或者%F	浮点数
# %r	    字符串（采用repr()显示）
# %o	    八进制整数
# %e	    指数（基底写为e）
# %E	    指数（基底写为E）
# %%	    字符%
# exp：要转换的项。如果要指定的项有多个，需要通过元组的形式进行指定，但不能使用列表。
name = "zl"
age = '23'
gender = 'male'
print('your name is %s, your age is %s, your gender is %s' % (name, age, gender))
# print(f"your name is {name}, your age is {age}, your gender is {gender}")

# 使用字符串对象的format()方法
# str.format(args)
# str用于指定字符串的显示样式（即模板）；
# args用于指定要转换的项，如果有多项，则用逗号进行分隔。
# {[index][:[[fill]align][sign][#][width][.precision][type]]}
# index：可选参数，用于指定要设置格式的对象在参数列表中的索引位置，索引值从0开始。如果省略，则根据值的先后顺序自动分配。
# 当一个模板中出现多个占位符时，指定索引位置的规范需统一。即全部采用手动指定，或者全部采用自动。例如，定义“'我是数值：{:d}，我是字符串：{1:s}'”模板是错误的，会抛出异常。
# fill：可选参数，用于指定空白处填充的字符。
# align：可选参数，用于指定对齐方式（值为“ < ”表示内容左对齐；值为“ > ”表示内容右对齐；值为“=”表示内容右对齐，将符号放在填充内容的最左侧，且只对数字类型有效；值为“ ^ ”表示内容居中），需要配合width一起使用。
# sign：可选参数，用于指定有无符号数（值为“+”表示正数加正号，负数加负号；值为“-”表示正数不变，负数加负号；值为空格表示正数加空格，负数加负号）。
# #：可选参数，对于二进制、八进制和十六进制，如果加上“#”，表示会显示0b/0o/0x前缀，否则不显示前缀。
# width：可选参数，用于指定所占宽度。
# .precision：可选参数，用于指定保留的小数位数。
# type：可选参数，用于指定类型。

# 格式字符	说明
# S	        对字符串类型格式化
# D	        十进制整数
# C	        将十进制整数自动转换成对应的Unicode字符
# e或者E	转换为科学计数法表示再格式化
# g或者G	自动在e和f或者E和F中切换
# b	        将十进制整数自动转换成二进制表示再格式化
# o	        将十进制整数自动转换成八进制表示再格式化
# x或者X	将十进制整数自动转换成十六进制表示再格式化
# f或者F	转换为浮点数（默认小数点后保留6位）再格式化
# %	        显示百分比（默认显示小数点后6位）
print('1251+3950的结果是（以货币形式显示）：￥{:,.2f}元'.format(1251 + 3950))  # 以货币形式显示
print('{0:.1f}用科学计数法表示：{0:E}'.format(120000.1))  # 用科学计数法表示
print('π取5位小数点：{:.5f}'.format(math.pi))  # 输出小数点后五位
print('{0:d}的16进制结果是：{0:#x}'.format(100))  # 输出十六进制数
print('天才是由 {:.0%} 的灵感，加上 {:.0%} 的汗水 。'.format(0.01, 0.99))  # 输出百分比，并且不带小数
