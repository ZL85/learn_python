# 注释规则
# 单行注释
# 在Python中，使用“#”作为单行注释的符号
# 多行注释
# Python将包含在一对三引号（'''……'''）或者（"""……"""）之间，并且不属于任何语句的内容认为是注释
# 中文注释
# -*- coding:编码 -*-
# #coding=编码
# '''
# 编码为文件所使用的字符编码类型，如果采用UTF-8编码，则设置为utf-8；如果采用GBK，则设置为gbk或cp936
# '''
# #coding=utf-8

# 代码缩进
# Python采用代码缩进和冒号“:”区分代码之间的层次，通常情况下采用4个空格作为一个缩进量

# 编码规范
# Python中采用PEP 8作为编码规范，其中PEP是Python Enhancement Proposal的缩写
# 编写规则
# 每个import语句只导入一个模块，尽量避免一次导入多个模块
# 不要在行尾添加分号“;”，也不要用分号将两条命令放在同一行
# 建议每行不超过80个字符，如果超过，建议使用小括号“()”将多行内容隐式地连接起来，而不推荐使用反斜杠“\”进行连接。不过以下两种情况除外：导入模块的语句过长；注释里的URL
# 使用必要的空行可以增加代码的可读性。一般在顶级定义（如函数或者类的定义）之间空两行，而方法定义之间空一行
# 通常情况，运算符两侧、函数参数之间、逗号“,”两侧建议使用空格进行分隔
# 应该避免在循环中使用＋和＋＝操作符累加字符串。这是因为字符串是不可变的，这样做会创建不必要的临时对象。推荐的做法是将每个子字符串加入列表，然后在循环结束后使用join()方法连接列表
# 适当使用异常处理结构提高程序容错性，但不能过多依赖异常处理结构，适当的显式判断还是必要的
# 命名规范
# 模块名尽量短小，并且使用全部小写字母，可以使用下划线分隔多个字母
# 包名尽量短小，并且使用全部小写字母，不推荐使用下划线
# 类名采用单词首字母大写形式（即Pascal风格）
# 模块内部的类采用下划线“_”+Pascal风格的类名组成
# 函数、类的属性和方法的命名规则同模块类似，也是全部采用小写字母，多个字母间用下划线“_”分隔
# 常量命名时采用全部大写字母，可以使用下划线
# 使用单下划线“_”开头的模块变量或者函数是受保护的，在使用import*from语句从模块中导入时这些变量或者函数不能被导入
# 使用双下划线“__”开头的实例变量或方法是类私有的
