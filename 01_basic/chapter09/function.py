# 在实际项目开发中如果想让某一段代码多次使用，应该怎么做呢？
# 在Python中，提供了函数。我们可以把实现某一功能的代码定义为一个函数，然后在需要使用时，随时调用即可，十分方便。
import math


# 函数的创建和调用

# 创建一个函数
# 创建函数也称为定义函数，可以理解为创建一个具有某种用途的工具，使用def关键字实现
# def functionname([parameterlist]):
#     ['''comments''']
#     [functionbody]
# functionname：函数名称，在调用函数时使用。
# parameterlist：可选参数，用于指定向函数中传递的参数。如果有多个参数，各参数间使用逗号“, ”分隔。
#     如果不指定，则表示该函数没有参数。在调用时，也不指定参数。当函数没有参数时，必须保留一对空的小括号“()”，否则将报错。
# '''comments'''：可选参数，表示为函数指定注释，注释的内容通常是说明该函数的功能、要传递的参数的作用等，可以为用户提供友好提示和帮助的内容。
#     在定义函数时，如果指定了'''comments'''参数，那么在调用函数时，输入函数名称及左侧的小括号时，就会显示该函数的帮助信息。这些帮助信息就是通过定义的注释提供的。
#     如果在输入函数名和左侧括号后，没有显示友好提示，那么就要检查函数本身是否有误，检查方法可以是在未调用该方法时，先执行一遍代码。
# functionbody：可选参数，用于指定函数体，即该函数被调用后，要执行的功能代码。如果函数有返回值，可以使用return语句返回。
#     函数体“functionbody”和注释“'''comments'''”相对于def关键字必须保持一定的缩进。
def addnum(num1, num2):
    """
    :param num1: 加数
    :param num2: 被加数
    :return: 两数和
    """
    result = num1 + num2
    return result


print(f"6 + 6 =", addnum(6, 6))


# 如果想定义一个什么也不做的空函数，可以使用pass语句作为占位符。
def donothing():
    pass


# 调用函数
# 调用函数也就是执行函数。如果把创建的函数理解为创建一个具有某种用途的工具，那么调用函数就相当于使用该工具。
# functionname([parametersvalue])
# functionname：函数名称，要调用的函数名称必须是已经创建好的。
# parametersvalue：可选参数，用于指定各个参数的值。如果需要传递多个参数值，则各参数值间使用逗号“,”分隔。如果该函数没有参数，则直接写一对小括号即可。

# 参数传递
# 在调用函数时，大多数情况下，主调函数和被调用函数之间有数据传递关系，这就是有参数的函数形式。
# 函数参数的作用是传递数据给函数使用，函数利用接收的数据进行具体的操作处理。
# 形式参数：在定义函数时，函数名后面括号中的参数为“形式参数”。
# 实际参数：函数的调用者提供给函数的参数称为实际参数。

# 根据实际参数的类型不同，可以分为将实际参数的值传递给形式参数，和将实际参数的引用传递给形式参数两种情况。
# 当实际参数为不可变对象时，进行的是值传递；当实际参数为可变对象时，进行的是引用传递。
def demo(obj):
    print("original value:", obj)
    obj += obj


print("值传递(实参为不可变对象)")
str1 = "hello ahu"
demo(str1)
print("after value:", str1)
print("引用传递(实参为可变对象)")
list1 = [0, 1, 2, 3, 4, 5]
demo(list1)
print("after value:", list1)


def caculatebmi(person, height, weight):
    """
    :param person:姓名
    :param height:身高
    :param weight:体重
    :return:None
    """
    print(person + "的身高：" + str(height) + "米 \t 体重：" + str(weight) + "千克")
    bmi = weight / (height * height)  # 用于计算BMI指数，公式为“体重/身高的平方”
    print(person + "的BMI指数为：" + str(bmi))  # 输出BMI指数
    # 判断身材是否合理
    if bmi < 18.5:
        print("您的体重过轻 ~@_@~")
    if 18.5 <= bmi < 24.9:
        print("正常范围，注意保持 (-_-)")
    if 24.9 <= bmi < 29.9:
        print("您的体重过重 ~@_@~")
    if bmi >= 29.9:
        print("肥胖 ^@_@^")


caculatebmi("路人甲", 1.83, 60)  # 计算路人甲的BMI指数
caculatebmi("路人乙", 1.60, 50)  # 计算路人乙的BMI指数

# 位置参数
# 调用函数时，传递的实际参数的位置与形式参数的位置必须保持一致

# 关键字参数
# 关键字参数是指使用形式参数的名字来确定输入的参数值。
# 通过该方式指定实际参数时，不再需要与形式参数的位置完全一致。只要将参数名写正确即可。
# 这样可以避免用户需要牢记参数位置的麻烦，使得函数的调用和参数传递更加灵活方便。
caculatebmi(height=1.94, person="路人丙", weight=75)


# 为参数设置默认值
# 调用函数时，如果没有指定某个参数将抛出异常，为了解决这个问题，我们可以为参数设置默认值，即在定义函数时，直接指定形式参数的默认值。
# def functionname(...,[parameter1 = defaultvalue1]):
#     [functionbody]
# functionname：函数名称，在调用函数时使用；
# parameter1 = defaultvalue1：可选参数，用于指定向函数中传递的参数，并且为该参数设置默认值为defaultvalue1；
# functionbody：可选参数，用于指定函数体，即该函数被调用后，要执行的功能代码。
# 在定义函数时，指定默认的形式参数必须在所有参数的最后，否则将产生语法错误。
def circlearea(ridus, pi=3.14):
    area = pi * ridus * ridus
    return area


print(circlearea(5))

# 在Python中，可以使用“函数名.__defaults__”查看函数的默认值参数的当前值， 其结果是一个元组。
print(circlearea.__defaults__)


# 定义函数时，为形式参数设置默认值要牢记一点：默认参数必须指向不可变对象。

# 可变参数
# 可变参数也称不定长参数，即传入函数中的实际参数可以是零个、一个、两个到任意个。

# *parameter
# 这种形式表示接收任意多个实际参数并将其放到一个元组中。
def printcoffee(*coffeename):  # 定义函数
    print('我喜欢的咖啡有：')
    for item in coffeename:
        print(item)  # 输出咖啡名


printcoffee('蓝山')
printcoffee('蓝山', '卡布奇诺', '土耳其', '巴西', '哥伦比亚')
printcoffee('蓝山', '卡布奇诺', '曼特宁', '摩卡')

# 如果想要使用一个已经存在的列表作为函数的可变参数，可以在列表的名称前加“*”。
param = ['蓝山', '卡布奇诺', '土耳其']
printcoffee(*param)


# **parameter
# 这种形式表示接收任意多个类似关键字参数一样显式赋值的实际参数，并将其放到一个字典中。
def printsign(**sign):  # 定义输出姓名和星座的函数
    for key, value in sign.items():  # 遍历字典
        print("[" + key + "]的星座是：" + value)  # 输出组合后的信息


printsign(绮梦='水瓶座', 冷伊一='射手座')
printsign(香凝='双鱼座', 黛兰='双子座', 冷伊一='射手座')

# 如果想要使用一个已经存在的字典作为函数的可变参数，可以在字典的名称前加“**”。
dict1 = {'绮梦': '水瓶座', '冷伊一': '射手座', '香凝': '双鱼座'}  # 定义一个字典
printsign(**dict1)  # 通过字典指定函数的可变参数

# 在Python中，可以在函数体内使用return语句为函数指定返回值。
# 该返回值可以是任意类型，并且无论return语句出现在函数的什么位置，只要得到执行，就会直接结束函数的执行。

# return [value]
# return：为函数指定返回值后，在调用函数时，可以把它赋给一个变量（如result），用于保存函数的返回结果。
# 如果返回一个值，那么result中保存的就是返回的一个值，该值可以是任意类型。如果返回多个值，那么result中保存的是一个元组。
# value：可选参数，用于指定要返回的值，可以返回一个值，也可返回多个值。

# 变量的作用域
# 局部变量是指在函数内部定义并使用的变量，它只在函数内部有效。
# 全局变量为能够作用于函数内外的变量。
# 当局部变量与全局变量重名时，对函数体的变量进行赋值后，不影响函数体外的变量。
# 在函数体内定义，并且使用global关键字修饰后，该变量也就变为全局变量。在函数体外也可以访问到该变量，并且在函数体内还可以对其进行修改。

# 匿名函数
# 匿名函数（lambda）是指没有名字的函数，应用在需要一个函数但是又不想费神去命名这个函数的场合。
# 在Python中，使用lambda表达式创建匿名函数
# result = lambda [arg1 [,arg2,...,argn]]:expression
# result：用于调用lambda表达式。
# [arg1 [,arg2,...,argn]]：可选参数，用于指定要传递的参数列表，多个参数间使用逗号“,”分隔。
# expression：必选参数，用于指定一个实现具体功能的表达式。如果有参数，那么在该表达式中将应用这些参数。
# 使用lambda表达式时，参数可以有多个，用逗号“,”分隔，但是表达式只能有一个，即只能返回一个值，而且也不能出现其他非表达式语句（如for或while）。
rid = 10  # 半径
res = lambda rid: math.pi * rid * rid  # 计算圆的面积的lambda表达式
print('半径为', rid, '的圆面积为: ', res(rid))
# 在使用lambda表达式时，需要定义一个变量，用于调用该lambda表达式

# lambda的首要用途是指定短小的回调函数。
# 假设采用爬虫技术获得某商城的秒杀商品信息，并保存在列表中，
# 现需要对这些信息进行排序，排序规则是优先按秒杀金额升序排列，如果有重复的，再按折扣比例降序排列。
bookinfo = [('不一样的卡梅拉（全套)', 22.50, 120), ('零基础学Android', 65.10, 89.80),
            ('摆渡人', 23.40, 36.00), ('福尔摩斯探案全集8册', 22.50, 128)]
print('爬取到的商品信息：', bookinfo)
bookinfo.sort(key=lambda x: (x[1], x[1] / x[2]))  # 按指定规则进行排序
print('排序后的商品信息：', bookinfo)
