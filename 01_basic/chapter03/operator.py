# 算数运算符
# +加
print(12.45 + 15)

# -减
print(4.56 - 0.26)

# *乘
print(5 * 3.6)

# /除
print(7 / 2)

# %求余，即返回除法的余数
print(7 % 2)

# //取整除，即返回商的整数部分
print(7 // 2)

# **幂，即返回x的y次方
print(2 ** 10)

# 赋值运算符

# =简单的赋值运算
x = 9
print(x)
y = 2
print(y)

# +=加赋值
x += y
print(x)

# -+减赋值
x -= y
print(x)

# *=乘赋值
x *= y
print(x)

# /=除赋值
x /= y
print(x)

# %=取余数赋值
x %= y
print(x)

# **=幂赋值
x **= y
print(x)

# //=最整除赋值
x //= y
print(x)

# 比较运算符
# >大于
print(x > y)

# <小于
print(x < y)

# >=大于等于
print(x >= y)

# <=小于等于
print(x <= y)

# ==等于
print(x == y)

# !=不等于
print(x != y)

# 逻辑运算符
b1 = True
b2 = False

# and逻辑与
print(b1 and b2)

# or逻辑或
print(b1 or b2)

# not逻辑非
print(not b1)
print(b1)

# 位运算符
# 按位与（&）运算
# “按位与”运算的运算符为“&”，它的运算法则是：两个操作数据的二进制表示，只有对应位都是1时，结果位才是1，否则为0
# 如果两个操作数的精度不同，则结果的精度与精度高的操作数相同
print("12&8=" + str(12 & 8))

# 按位或（｜）运算
# “按位或”运算的运算符为“|”，它的运算法则是：两个操作数据的二进制表示，只有对应位都是0，结果位才是0，否则为1
# 如果两个操作数的精度不同，则结果的精度与精度高的操作数相同
print("4|8=" + str(4 | 8))

# 按位异或（^）运算
# “按位异或”运算的运算符是“^”，它的运算法则是：当两个操作数的二进制表示相同（同时为0或同时为1）时，结果为0，否则为1
# 若两个操作数的精度不同，则结果数的精度与精度高的操作数相同。
print("31^22=" + str(31 ^ 22))

# 按位取反（~）运算
# “按位取反”运算也称“按位非”运算，运算符为“~”。“按位取反”运算就是将操作数对应二进制中的1修改为0，0修改为1
print("~123=" + str(~123))

# 左移位（<<）运算
# 左移位运算符<<是将一个二进制操作数向左移动指定的位数，左边（高位端）溢出的位被丢弃，右边（低位端）的空位用0补充。
# 左移位运算相当于乘以2^n

# 右移位（>>）运算
# 右移位运算符>>是将一个二进制操作数向右移动指定的位数，右边（低位端）溢出的位被丢弃，而在填充左边（高位端）的空位时，
# 如果最高位是0（正数），左侧空位填入0；如果最高位是1（负数），左侧空位填入1
# 右移位运算相当于除以2^n

# 由于移位运算的速度很快，在程序中遇到表达式乘以或除以2^n的情况时，一般采用移位运算来代替。

# 条件表达式
print(x if x > y else y)
