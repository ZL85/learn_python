# 在Python标准库中包含了大量的模块（称为标准模块），而且还有很多第三方模块，另外开发者自己也可以开发自定义模块。

# 模块的英文是Modules，可以认为是一盒（箱）主题积木，通过它可以拼出某一主题的东西。
# 这与函数不同，一个函数相当于一块积木，而一个模块中可以包括很多函数，也就是很多积木，所以也可以说模块相当于一盒积木。
# 在Python中，一个扩展名为.py的文件就称为一个模块。

# 通常情况下，我们把能够实现某一特定功能的代码放置在一个文件中作为一个模块，从而方便其他程序和脚本导入并使用。
# 另外，使用模块也可以避免函数名和变量名冲突。

# 通过前面的学习，我们知道对于Python代码可以写在一个文件中。
# 但是随着程序不断变大，为了便于维护，需要将其分为多个文件，这样可以提高代码的可维护性。
# 另外，使用模块还可以提高代码的可重用性。即编写好一个模块后，只要是实现该功能的程序，都可以导入这个模块实现。

# 自定义模块
# 在Python中，自定义模块有两个作用，一个是规范代码，让代码更易于阅读，另一个是方便其他程序使用的已经编写好的代码，提高开发效率。

# 创建模块
# 创建模块时，设置的模块名不能是Python自带的标准模块名称。

# 使用import语句导入模块
# 使用模块需要先以模块的形式加载模块中的代码，这可以使用import语句实现。
# import modulename [as alias]
# modulename为要导入模块的名称；
# [as alias]为给模块起的别名，通过该别名也可以使用模块。
import addnum as a

print(a.addnum(6, 6))
# 使用import语句还可以一次导入多个模块，在导入多个模块时，模块名之间使用逗号“,”进行分隔。

# 使用from…import语句导入模块
# 在使用import语句导入模块时，每执行一条import语句都会创建一个新的命名空间（namespace），并且在该命名空间中执行与.py文件相关的所有语句。
# 在执行时，需在具体的变量、函数和类名前加上“模块名.”前缀。
# 如果不想在每次导入模块时都创建一个新的命名空间，而是将具体的定义导入当前的命名空间中，这时可以使用from...import语句。
# 命名空间可以理解为记录对象名字和对象之间对应关系的空间。
# 目前Python的命名空间大部分都是通过字典（dict）来实现的。其中，key是标识符；value是具体的对象。
# 使用from...import语句导入模块后，不需要再添加前缀，直接通过具体的变量、函数和类名等访问即可。
# from modulename import member
# modulename：模块名称，区分字母大小写，需要和定义模块时设置的模块名称的大小写保持一致。
# member：用于指定要导入的变量、函数或者类等。可以同时导入多个定义，各个定义之间使用逗号“,”分隔。如果想导入全部定义，也可以使用通配符星号“*”代替。
# 在导入模块时，如果使用通配符“*”导入全部定义后，想查看具体导入了哪些定义，可以通过显示dir()函数的值来查看。
print(dir())

# 在使用from...import语句导入模块中的定义时，需要保证所导入的内容在当前的命名空间中是唯一的，否则将出现冲突，后导入的同名变量、函数或者类会覆盖先导入的。
# 这时就需要使用import语句进行导入。
import rectangle as r  # 导入矩形模块
import circle as c  # 导入圆形模块


print("圆形的周长为：", c.perimeter(10))  # 调用计算圆形周长的方法
print("矩形的周长为：", r.perimeter(10, 20))  # 调用计算矩形周长的方法

# 以主程序的形式执行
# 要想模块中的测试代码不被导入模块程序执行，可以将代码放在if __name__ == '__main__':中
# 在每个模块的定义中都包括一个记录模块名称的变量__name__，程序可以检查该变量，以确定它们在哪个模块中执行。
# 如果一个模块不是被导入其他程序中执行，那么它可能在解释器的顶级模块中执行。顶级模块的__name__变量的值为__main__。

# 导入和使用标准模块
import random  # 导入标准模块random

print(random.ranint(0, 10))  # 生成一个0～10（包括0和10）的随机整数

# Python常用的内置标准模块
# 模块名        描述
# sys          与Python解释器及其环境操作相关的标准库
# time         提供与时间相关的各种函数的标准库
# os           提供了访问操作系统服务功能的标准库
# calendar     提供与口期相关的各种函数的标准库
# urllib       用于读取来自网上《服务器上）的数据的标准库
# json         用于使用JSON序列化和反序列化对象
# re           用于在字符串中执行正则表达式匹配和替换
# math         提供标准算术运算函数的标准库
# decimal      用于进行精确控制运算精度、有效数位和四舍五入操作的十进制运算
# shutil       用于进行高级文件操作，如复制、移动和重命名等
# logging      提供了灵活的记录事件、错误、警告和调试信息等日志信息的功能
# tkinter      使用Python进行GUI编程的标准库

# 第三方模块的下载与安装
# 这些第三方模块，可以在Python官方推出的http://pypi.python.org/pypi中找到。
# 在使用第三方模块时，需要先下载并安装该模块，然后就可以像使用标准模块一样导入并使用了。
# 下载和安装第三方模块可以使用Python提供的pip命令实现。
# pip <command> [modulename]
# command：用于指定要执行的命令。常用的参数值有install（用于安装第三方模块）、uninstall（用于卸载已经安装的第三方模块）、list（用于显示已经安装的第三方模块）等。
# modulename：可选参数，用于指定要安装或者卸载的模块名，当command为install或者uninstall时不能省略。
# 例如，安装第三方numpy模块（用于科学计算），可以在命令行窗口中输入以下代码：
# pip install numpy

# 在大型程序中可能需要导入很多模块，推荐先导入Python提供的标准模块，然后再导入第三方模块，最后导入自定义模块。
# 如果想要查看Python中都有哪些模块（包括标准模块和第三方模块），可以在IDLE中输入以下命令
# help('modules')

# 如果只是想要查看已经安装的第三方模块，可以在命令行窗口中输入以下命令。
# pip list
